Transform: 'AWS::Serverless-2016-10-31'
Description: serverless specification for squire bots
Resources:
  NumpyLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: .
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  PandasLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: .
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  OpenaiLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: .
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  PynaclLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: .
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: makefile

  InteractionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: StageParameter
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: AWS::StackName
        paths:
          /interactions:
            post:
              summary: "discord interactions"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: '200 response'
                '401':
                  description: '401 response'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                  "'.[UNAUTHORIZED].'":
                    statusCode: '401'
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: >
                    ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html

                    ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload

                    ##  'rawBody' allows passthrough of the (unsurprisingly) raw request body; similar to flask.request.data

                    ##  from https://github.com/oozio/discord_aws_bot_demo/blob/master/mapping_template

                    #set($allParams = $input.params())
                    {
                    "rawBody": "$util.escapeJavaScript($input.body).replace("\'", "'")",
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "context" : {
                        "account-id" : "$context.identity.accountId",
                        "api-id" : "$context.apiId",
                        "api-key" : "$context.identity.apiKey",
                        "authorizer-principal-id" : "$context.authorizer.principalId",
                        "caller" : "$context.identity.caller",
                        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                        "http-method" : "$context.httpMethod",
                        "stage" : "$context.stage",
                        "source-ip" : "$context.identity.sourceIp",
                        "user" : "$context.identity.user",
                        "user-agent" : "$context.identity.userAgent",
                        "user-arn" : "$context.identity.userArn",
                        "request-id" : "$context.requestId",
                        "resource-id" : "$context.resourceId",
                        "resource-path" : "$context.resourcePath"
                        }
                    }
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
                uri:
                  Fn::Sub:
                    - 'arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations'
                    - AWSRegion:
                        Ref: AWS::Region
                      AWSAccountId:
                        Ref: AWS::AccountId
                      FunctionArn:
                        Fn::GetAtt: [ InteractionFunction, Arn ]
            options:
              summary: "CORS support"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"

  CommandFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.command
      Runtime: python3.9
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY:
            Ref: OpenaiApiKeyParameter
      Layers:
        - Ref: NumpyLayer
        - Ref: PandasLayer
        - Ref: OpenaiLayer
    Metadata:
      BuildMethod: makefile

  InteractionFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.interaction
      Runtime: python3.9
      MemorySize: 128
      Timeout: 3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: "/interactions"
            Method: "post"
            RestApiId:
              Ref: InteractionApi
      Policies:
        - LambdaInvokePolicy:
            FunctionName:
              Ref: CommandFunction
      Environment:
        Variables:
          DISCORD_PUBLIC_KEY:
            Ref: DiscordPublicKeyParameter
          COMMAND_LAMBDA_ARN:
            Fn::GetAtt: [ CommandFunction, Arn ]
      Layers:
        - Ref: PynaclLayer
    Metadata:
      BuildMethod: makefile

Parameters:
  DiscordPublicKeyParameter:
    Type: String
    Description: 'discord public key used to authenticate from-discord post requests (found in Application -> General Information)'

  OpenaiApiKeyParameter:
    Type: String
    Description: 'openai key used to make requests to the openai api'

  StageParameter:
    Type: String
    Description: 'deploy to a specific stage'
    Default: dev